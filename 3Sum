class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> sol;
        int n = nums.size();
        
        // Handle edge cases
        if (n < 3) return sol;
        if (nums.empty()) return sol;
        
        sort(nums.begin(), nums.end()); // Sort the array in ascending order
        
        // Iterate over the array
        for (int i = 0; i < n - 2; i++) {
            // Skip duplicates for the first element
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            
            // Early termination: if the first element is greater than 0, no need to continue
            if (nums[i] > 0) break;
            // Early termination for the inner loop
            if (nums[i] + nums[n - 1] + nums[n - 2] < 0) continue;
            
            int j = i + 1, k = n - 1;
            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if (sum == 0) {
                    sol.push_back({nums[i], nums[j], nums[k]});
                    
                    // Skip duplicates for the second and third elements
                    while (j < k && nums[j] == nums[j + 1]) j++;
                    while (j < k && nums[k] == nums[k - 1]) k--;
                    
                    // Move the pointers to the next unique elements
                    j++;
                    k--;
                } else if (sum < 0) {
                    // Skip duplicates for the second element
                    while (j < k && nums[j] == nums[j + 1]) j++;
                    j++;
                } else {
                    // Skip duplicates for the third element
                    while (j < k && nums[k] == nums[k - 1]) k--;
                    k--;
                }
            }
        }
        return sol;
    }
};
