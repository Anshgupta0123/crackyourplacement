class Solution {
  public:
    // Function which returns the  root of the flattened linked list.
    Node *merge(Node* curr1, Node* curr2) {
    Node *dummyHead = new Node(-1);
    Node* curr = dummyHead;
    
    curr1 -> next = NULL;
    
    while(curr1 != NULL && curr2 != NULL) {
        if(curr1 -> data < curr2 -> data) {
            curr -> bottom = curr1;
            curr1 = curr1 -> bottom;
        } else {
            curr -> bottom = curr2;
            curr2 = curr2 -> bottom;           
        }
        
        curr = curr -> bottom;
    }
    
    // now check for remaining elements 
    curr -> bottom = curr1 ? curr1 : curr2;
    
    return dummyHead -> bottom;
}

Node *flatten(Node *root)
{
   // base case 
   if(root == NULL || root -> next == NULL) return root;
   
   // recur for list on right
   root -> next = flatten(root -> next);
   
   // now
   root = merge(root, root -> next);
   
   return root;
}

};