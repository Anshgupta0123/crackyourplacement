        int n = nums.size();
        
        // Create a pair of the element and its index
        std::vector<std::pair<int, int>> numWithIndex(n);
        for(int i = 0; i < n; i++)
            numWithIndex[i] = {nums[i], i};
        
        // Sort the pair based on the element
        std::sort(numWithIndex.begin(), numWithIndex.end());
        
        // To keep track of visited elements
        std::vector<bool> visited(n, false);
        
        int swaps = 0;
        
        // Traverse through array elements
        for(int i = 0; i < n; i++)
        {
            // If already visited or already in the correct position
            if(visited[i] || numWithIndex[i].second == i)
                continue;
            
            // Find out the number of node in this cycle
            int cycle_size = 0;
            int j = i;
            while(!visited[j])
            {
                visited[j] = true;
                
                // Move to the next node
                j = numWithIndex[j].second;
                cycle_size++;
            }
            
            // Update swap count (for a cycle of n nodes, we need n-1 swaps)
            if(cycle_size > 1)
                swaps += (cycle_size - 1);
        }
        
        return swaps;
