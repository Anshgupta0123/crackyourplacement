

class Solution {
public:
    void dfs(int c, int i, int j, int& ans, vector<vector<int>>& visit,
             vector<vector<int>>& grid) {
        int n = grid.size();
        visit[i][j] = 1;
        grid[i][j] = c;
        ans++;
        vector<int> d = {-1, 0, 1, 0, -1};
        for (int k = 0; k < 4; k++) {
            int x = i + d[k];
            int y = j + d[k + 1];
            if (x >= 0 && y >= 0 && y < n && x < n && grid[x][y] == 1 &&
                visit[x][y] == 0) {
                dfs(c, x, y, ans, visit, grid);
            }
        }
    }
    int largestIsland(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<int> d = {-1, 0, 1, 0, -1};
        vector<vector<int>> visit(n, vector<int>(n, 0));
        map<int, int> mpp;
        int c = 1, ma = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0 && visit[i][j] == 0) {
                    int ans = 0;
                    dfs(c, i, j, ans, visit, grid);
                    mpp[c] = ans;
                    ma = max(ma, ans);
                    c++;
                }
            }
        }
        if (c == 1)
            return 1;
        if (c == 2) {
            int ans = mpp[1];
            ans++;
            if (ans >= n * n)
                return n * n;
            return ans;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    int area = 0;
                    unordered_set<int> set;
                    for (int k = 0; k < 4; k++) {
                        int x = i + d[k];
                        int y = j + d[k + 1];
                        if (x >= 0 && y >= 0 && y < n && x < n &&
                            grid[x][y] > 0) {
                            set.insert(grid[x][y]);
                        }
                    }
                    for (auto it : set) {
                        area += mpp[it];
                    }
                    ma = max(ma, area + 1);
                }
            }
        }
        return ma;
    }
};